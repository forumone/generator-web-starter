# Consolidate the common configuration for reuse across multiple steps.
definitions:
  # Configure some default step values.
  step-defaults: &step-defaults
    timeout_in_minutes: 15

  # Specify common agent queue parameters.
  queues:
    # Docker-based tasks should run in the Docker queue.
    docker-agents: &docker-agents
      agents:
        queue: "docker-builders"

  # Specify common plugin configurations.
  plugins:
    ecr: &ecr
      ecr#v2.0.0:
        login: true
        no-include-email: true

env:
  # Identify the address for the shared Buildkite ECR repository.
  IMAGE_REPOSITORY: "165761832703.dkr.ecr.us-east-1.amazonaws.com/buildkite"

  # Set this as an environment variable for automatic usage by default for all
  # docker-compose buildkite plugin executions.
  BUILDKITE_PLUGIN_DOCKER_COMPOSE_IMAGE_REPOSITORY: "$IMAGE_REPOSITORY"

steps:
  - label: ":hammer: :docker: Build"
    key: "build"
    <<: *step-defaults
    <<: *docker-agents
    plugins:
      # Log into ECR for this build step to access and push images.
      - *ecr

      # Prebuild and upload the listed services defined in the Buildkite
      # Docker Compose configuration. In this case, both a production-ready
      # and test image are pushed for use in later steps.
      - docker-compose#v3.4.0:
          # Pull pre-existing images if available to leverage caches and
          # speed up applicable portions of the image build.
          # These images are attempted to pull in sequence up to the first
          # success, and any failures don't prevent further build steps.
          cache-from:
            - release:$IMAGE_REPOSITORY:$BUILDKITE_PIPELINE_SLUG-$BUILDKITE_COMMIT
            - release:$IMAGE_REPOSITORY:$BUILDKITE_PIPELINE_SLUG-latest
            - test:$IMAGE_REPOSITORY:$BUILDKITE_PIPELINE_SLUG-$BUILDKITE_COMMIT
            - test:$IMAGE_REPOSITORY:$BUILDKITE_PIPELINE_SLUG-latest
          build:
            - test
            - release
          config:
            - docker-compose.buildkite.yml
          upload-container-logs: "on-error"
          build-parallel: true
          # Upload commit-specific image tags for clarity and caching support.
          push:
            - test:$IMAGE_REPOSITORY:$BUILDKITE_PIPELINE_SLUG-latest
            - test:$IMAGE_REPOSITORY:$BUILDKITE_PIPELINE_SLUG-$BUILDKITE_COMMIT
            - release:$IMAGE_REPOSITORY:$BUILDKITE_PIPELINE_SLUG-latest
            - release:$IMAGE_REPOSITORY:$BUILDKITE_PIPELINE_SLUG-$BUILDKITE_COMMIT

  # Wait for completion of the previous build steps.
  - wait: ~

  <%_ if (deploy.capistrano) { _%>
  - label: ":capistrano: Deploy"
    <<: *step-defaults
    concurrency: 1
    concurrency_group: '$BUILDKITE_PIPELINE_SLUG/$BUILDKITE_BRANCH/deploy'
    branches:
      <%_ for (const { source } of Object.values(deploy.capistrano.branches)) { _%>
      - <%= source %>
      <%_ } _%>
    plugins:
      # Log into ECR for this build step to access and push images.
      - *ecr

      # Download the prebuilt image and extract project files to the
      # local filesystem for further operations.
      - forumone/extract:
          image-service: release
          from: /var/www/html
          to: <%= serviceDirectory %>

      # Execute a Capistrano deployment using the defined branch to
      # environment mapping.
      - forumone/capistrano:
          require-stage: true
          branches:
            <%_ for (const {source, target} of Object.values(deploy.capistrano.branches)) { _%>
            <%= source %>: <%= target %>
            <%_ } _%>
  <%_ } _%>

  <%_ if (deploy.artifact) { _%>
  - label: ":git: Deploy"
    <<: *step-defaults
    concurrency: 1
    concurrency_group: '$BUILDKITE_PIPELINE_SLUG/$BUILDKITE_BRANCH/deploy'
    branches:
      <%_ for (const { source } of Object.values(deploy.artifact.branches)) { _%>
      - <%= source %>
      <%_ } _%>
    plugins:
      # Log into ECR for this build step to access and push images.
      - *ecr

      # Download the prebuilt image and extract project files to the
      # local filesystem for further operations.
      - forumone/extract:
          image-service: release
          from: /var/www/html
          to: <%= serviceDirectory %>

      # Execute an artifact deployment using the defined branch to
      # environment mapping.
      - forumone/artifact-push:
          source-directory: <%= serviceDirectory %>
          branches:
            <%_ for (const [deploymentId, branchConfig] of Object.entries(deploy.artifact.branches)) { _%>
            - match: <%= branchConfig.source %>
              target: <%= branchConfig.target %>
              remote: <%= branchConfig.remote %>
            <%_ } _%>
    <%_ } _%>
